#include <map>

std::map<std::string, int> opcodes = {
    {"push", COMMAND_PUSH},
    {"pop", COMMAND_POP},
    {"print", COMMAND_PRINT},
    {"seek_sp", COMMAND_SEEK_SP},
    {"add", COMMAND_ADD},
    {"sub", COMMAND_SUB},
    {"mul", COMMAND_MUL},
    {"div", COMMAND_DIV},
    {"rem", COMMAND_REM},
    {"and", COMMAND_BITWISE_AND},
    {"or", COMMAND_BITWISE_OR},
    {"xor", COMMAND_BITWISE_XOR},
    {"clone", COMMAND_CLONE},
    {"omit", COMMAND_OMIT},
    {"call", COMMAND_CALL},
    {"ret", COMMAND_RET},
    {"take", COMMAND_TAKE},
    {"add_fp", COMMAND_FP_ADD},
    {"sub_fp", COMMAND_FP_SUB},
    {"mul_fp", COMMAND_FP_MUL},
    {"div_fp", COMMAND_FP_DIV},
    {"power_fp", COMMAND_FP_POWER},
    {"ceil_fp", COMMAND_FP_CEIL},
    {"round_fp", COMMAND_FP_ROUND},
    {"malloc", COMMAND_MALLOC},
    {"load", COMMAND_LOAD},
    {"free", COMMAND_FREE},
    {"print_all", COMMAND_PRINT_ALL},
    {"print_fp", COMMAND_PRINT_FP},
    {"jmp", COMMAND_JUMP},
    {"je", COMMAND_JUMP_IF_ZERO},
    {"jne", COMMAND_JUMP_IF_NON_ZERO},
    {"jg", COMMAND_JUMP_IF_GREAT},
    {"jl", COMMAND_JUMP_IF_LESS},
    {"jge", COMMAND_JUMP_IF_GREAT_OR_EQUAL},
    {"jle", COMMAND_JUMP_IF_LESS_OR_EQUAL},
    {"shr", COMMAND_RIGHT_SHIFT},
    {"shl", COMMAND_LEFT_SHIFT},
    {"swap", COMMAND_SWAP},
    {"to_fp", COMMAND_TO_FP},
    {"to_fp_s", COMMAND_TO_FP_S},
    {"to_int", COMMAND_TO_INTEGER},
    {"call_c", COMMAND_CALL_C},
    {"load_native_fn", COMMAND_LOAD_NATIVE_FN},
    {"assert", COMMAND_ASSERT},
    {"read_char", COMMAND_READ_CHAR},
    {"read_int", COMMAND_READ_INTEGER},
    {"read_fp", COMMAND_READ_FLOATING},
    {"read_bin_int", COMMAND_READ_BINARY_INTEGER},
    {"read_bin_fp", COMMAND_READ_BINARY_FLOATING},
    {"print_string", COMMAND_PRINT_STRING},
    {"print_char", COMMAND_PRINT_CHAR},
    {"cmp_fp", COMMAND_COMPARE_FP},
    {"eof", COMMAND_EOF},
    {"is_nan", COMMAND_IS_NAN}
};

std::map<int, int> opcodes_types = {
    {COMMAND_PUSH, 1}, // push const
    {COMMAND_POP, 0},
    {COMMAND_PRINT, 0},
    {COMMAND_SEEK_SP, 1},
    {COMMAND_ADD, 0},
    {COMMAND_SUB, 0},
    {COMMAND_MUL, 0},
    {COMMAND_DIV, 0},
    {COMMAND_REM, 0},
    {COMMAND_BITWISE_AND, 0},
    {COMMAND_BITWISE_OR, 0},
    {COMMAND_BITWISE_XOR, 0},
    {COMMAND_CLONE, 0},
    {COMMAND_OMIT, 0},
    {COMMAND_CALL, 0},
    {COMMAND_RET, 0},
    {COMMAND_TAKE, 0},
    {COMMAND_FP_ADD, 0},
    {COMMAND_FP_SUB, 0},
    {COMMAND_FP_MUL, 0},
    {COMMAND_FP_DIV, 0},
    {COMMAND_FP_POWER, 0},
    {COMMAND_FP_CEIL, 0},
    {COMMAND_FP_ROUND, 0},
    {COMMAND_MALLOC, 0},
    {COMMAND_LOAD, 2},
    {COMMAND_FREE, 0},
    {COMMAND_PRINT_ALL, 0},
    {COMMAND_PRINT_FP, 0},
    {COMMAND_JUMP, 3},
    {COMMAND_JUMP_IF_ZERO, 3},
    {COMMAND_JUMP_IF_NON_ZERO, 3},
    {COMMAND_JUMP_IF_GREAT, 3},
    {COMMAND_JUMP_IF_LESS, 3},
    {COMMAND_JUMP_IF_GREAT_OR_EQUAL, 3},
    {COMMAND_JUMP_IF_LESS_OR_EQUAL, 3},
    {COMMAND_RIGHT_SHIFT, 0},
    {COMMAND_LEFT_SHIFT, 0},
    {COMMAND_SWAP, 0},
    {COMMAND_TO_FP, 0},
    {COMMAND_TO_FP_S, 0},
    {COMMAND_TO_INTEGER, 0},
    {COMMAND_CALL_C, 0},
    {COMMAND_LOAD_NATIVE_FN, 0},
    {COMMAND_ASSERT, 0},
    {COMMAND_READ_CHAR, 0},
    {COMMAND_READ_INTEGER, 0},
    {COMMAND_READ_FLOATING, 0},
    {COMMAND_READ_BINARY_INTEGER, 0},
    {COMMAND_READ_BINARY_FLOATING, 0},
    {COMMAND_PRINT_STRING, 0},
    {COMMAND_PRINT_CHAR, 0},
    {COMMAND_COMPARE_FP, 0},
    {COMMAND_EOF, 0},
    {COMMAND_IS_NAN, 0}
};
